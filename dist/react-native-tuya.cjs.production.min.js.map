{"version":3,"file":"react-native-tuya.cjs.production.min.js","sources":["../src/activator.ts","../src/bridgeUtils.ts","../src/device.ts","../src/home.ts","../src/homeDataManager.ts","../src/homeManager.ts","../src/homeMember.ts","../src/ota.ts","../src/timer.ts","../src/user.ts"],"sourcesContent":["import { DeviceBean } from './device';\r\nimport { NativeModules, Platform } from 'react-native';\r\nimport { DeviceDetailResponse } from './home';\r\nimport { TuyaError } from './generic';\r\n\r\nconst tuya = NativeModules.TuyaActivatorModule;\r\nconst tuyaBLEActivator = NativeModules.TuyaBLEActivatorModule;\r\nconst tuyaBLEScanner = NativeModules.TuyaBLEScannerModule;\r\n\r\nexport function openNetworkSettings() {\r\n  return tuya.openNetworkSettings({});\r\n}\r\n\r\nexport enum ActivatorType {\r\n  AP = 'THING_AP',\r\n  EZ = 'THING_EZ',\r\n  AP_4G_GATEWAY = 'THING_4G_GATEWAY',\r\n  QR = 'THING_QR',\r\n}\r\n\r\nexport type InitActivatorParams = {\r\n  homeId: number;\r\n  ssid: string;\r\n  password: string;\r\n  time: number;\r\n  type: ActivatorType;\r\n};\r\n\r\nexport interface InitBluetoothActivatorParams {\r\n  deviceId?: string;\r\n  homeId: number;\r\n  ssid: string;\r\n  password: string;\r\n}\r\n\r\nexport function initActivator(\r\n  params: InitActivatorParams\r\n): Promise<DeviceDetailResponse | TuyaError> {\r\n  return tuya.initActivator(params);\r\n}\r\n\r\nexport function stopConfig() {\r\n  return tuya.stopConfig();\r\n}\r\n\r\nexport function startBluetoothScan() {\r\n  if (Platform.OS === 'ios') {\r\n    return tuyaBLEScanner.startBluetoothScan();\r\n  }\r\n  return tuya.startBluetoothScan();\r\n}\r\n\r\nexport function initBluetoothDualModeActivator(\r\n  params: InitBluetoothActivatorParams\r\n): Promise<DeviceBean | TuyaError> {\r\n  if (Platform.OS === 'ios') {\r\n    return tuyaBLEActivator.initActivator(params);\r\n  }\r\n  return tuya.initBluetoothDualModeActivator(params);\r\n}\r\n\r\nexport function getCurrentWifi(\r\n  success: (ssid: string) => void,\r\n  error: () => void\r\n) {\r\n  // We need the Allow While Using App location permission to use this.\r\n  return tuya.getCurrentWifi({}, success, error);\r\n}\r\n","import { NativeEventEmitter, NativeModules } from 'react-native';\r\n\r\nexport const GROUPLISTENER = 'groupListener';\r\nexport const HARDWAREUPGRADELISTENER = 'hardwareUpgradeListener';\r\nexport const DEVLISTENER = 'devListener';\r\nexport const SUBDEVLISTENER = 'subDevListener';\r\nexport const HOMESTATUS = 'homeStatus';\r\nexport const HOMECHANGE = 'homeChange';\r\nexport const SINGLETRANSFER = 'SingleTransfer';\r\n\r\nlet eventEmitter = new NativeEventEmitter(NativeModules.TuyaRNEventEmitter);\r\n\r\nexport function addEvent(eventName: string, callback: (data: any) => any) {\r\n  return eventEmitter.addListener(eventName, callback);\r\n}\r\nexport const bridge = (key: string, id: string | number) => `${key}//${id}`;\r\n","import { NativeModules, EmitterSubscription, Platform } from 'react-native';\r\nimport { addEvent, bridge, DEVLISTENER } from './bridgeUtils';\r\nimport { TuyaError } from './generic';\r\n\r\nconst tuya = NativeModules.TuyaDeviceModule;\r\n\r\nexport type DeviceBean = {\r\n  productId: string;\r\n  devId: string;\r\n  verSw: string;\r\n  name: string;\r\n  dps: DeviceDps;\r\n  uuid: string;\r\n  communicationId: string;\r\n  connectionStatus: string;\r\n};\r\n\r\nexport type DevListenerParams = {\r\n  devId: string;\r\n};\r\n\r\nexport type DevListenerType =\r\n  | 'onDpUpdate'\r\n  | 'onRemoved'\r\n  | 'onStatusChanged'\r\n  | 'onNetworkStatusChanged'\r\n  | 'onDevInfoUpdate'\r\n  | 'onFirmwareUpgradeSuccess'\r\n  | 'onFirmwareUpgradeFailure'\r\n  | 'onFirmwareUpgradeProgress';\r\n\r\nlet devListenerSubs: { [devId: string]: EmitterSubscription } = {};\r\n\r\nexport function registerDevListener(\r\n  params: DevListenerParams,\r\n  type: DevListenerType,\r\n  callback: (data: any) => void\r\n) {\r\n  tuya.registerDevListener(params);\r\n  const sub = addEvent(bridge(DEVLISTENER, params.devId), data => {\r\n    if (data.type === type) {\r\n      callback(data);\r\n    }\r\n  });\r\n  devListenerSubs[params.devId] = sub;\r\n}\r\n\r\nexport function unRegisterAllDevListeners() {\r\n  for (const devId in devListenerSubs) {\r\n    const sub = devListenerSubs[devId];\r\n    sub.remove();\r\n    tuya.unRegisterDevListener({ devId });\r\n  }\r\n  devListenerSubs = {};\r\n}\r\n\r\nexport type GetDeviceParams = {\r\n  devId: string;\r\n};\r\n\r\nexport function getDevice(params: GetDeviceParams): Promise<any> {\r\n  if (Platform.OS === 'ios') {\r\n    console.error('[tuya] getDevice is not supported on iOS');\r\n    return Promise.resolve(null);\r\n  }\r\n  return tuya.getDevice(params);\r\n}\r\n\r\nexport function getDeviceData(params: GetDeviceParams): Promise<any> {\r\n  if (Platform.OS === 'ios') {\r\n    console.error('[tuya] getDevice is not supported on iOS');\r\n    return Promise.resolve(null);\r\n  }\r\n  return tuya.getDeviceData(params);\r\n}\r\n\r\nexport type DeviceDpValue = boolean | number | string;\r\nexport type DeviceDps = {\r\n  [dpId: string]: DeviceDpValue;\r\n};\r\nexport type SendParams = {\r\n  devId: string;\r\n} & DeviceDps;\r\n\r\nexport function send(params: object) {\r\n  return tuya.send(params);\r\n}\r\n\r\nexport type RemoveDeviceParams = { devId: string };\r\n\r\nexport function removeDevice(params: RemoveDeviceParams): Promise<string | TuyaError> {\r\n  return tuya.removeDevice(params);\r\n}\r\n\r\nexport type RenameDeviceParams = { devId: string; name: string };\r\n\r\nexport function renameDevice(params: RenameDeviceParams): Promise<string | TuyaError> {\r\n  return tuya.renameDevice(params);\r\n}\r\n\r\nexport type GetDataPointStatsParams = {\r\n  devId: string;\r\n  DataPointTypeEnum: 'DAY' | 'WEEK' | 'MONTH';\r\n  number: number; // number of historical data result values, up to 50\r\n  dpId: string;\r\n  startTime: number; // in ms\r\n};\r\n\r\nexport function getDataPointStat(\r\n  params: GetDataPointStatsParams\r\n): Promise<any> {\r\n  return tuya.getDataPointStat(params);\r\n}\r\n","import { NativeModules } from 'react-native';\r\nimport { DeviceDps } from './device';\r\nimport { TuyaError } from './generic';\r\n\r\nconst tuya = NativeModules.TuyaHomeModule;\r\n\r\nexport type QueryRoomListParams = {\r\n  homeId?: number;\r\n};\r\nexport type QueryRoomListResponse = {\r\n  name: string;\r\n  displayOrder: number;\r\n  id: number;\r\n  roomId: number;\r\n}[];\r\n\r\nexport function queryRoomList(\r\n  params: QueryRoomListParams\r\n): Promise<QueryRoomListResponse | TuyaError> {\r\n  return tuya.queryRoomList(params);\r\n}\r\n\r\nexport type GetHomeDetailParams = {\r\n  homeId: number;\r\n};\r\nexport type DeviceDetailResponse = {\r\n  homeId: number;\r\n  isOnline: boolean;\r\n  productId: string;\r\n  devId: string;\r\n  verSw: string;\r\n  name: string;\r\n  dps: DeviceDps;\r\n  homeDisplayOrder: number;\r\n  roomId: number;\r\n};\r\nexport type GetHomeDetailResponse = {\r\n  deviceList: DeviceDetailResponse[];\r\n  groupList: any[];\r\n  meshList: any[];\r\n  sharedDeviceList: any[];\r\n  sharedGroupList: any[];\r\n};\r\n\r\nexport function getHomeDetail(\r\n  params: GetHomeDetailParams\r\n): Promise<GetHomeDetailResponse | TuyaError> {\r\n  return tuya.getHomeDetail(params);\r\n}\r\n\r\nexport type UpdateHomeParams = {\r\n  homeId: number;\r\n  name: string;\r\n  geoName: string;\r\n  lon: number;\r\n  lat: number;\r\n};\r\n\r\nexport function updateHome(params: UpdateHomeParams): Promise<string | TuyaError> {\r\n  return tuya.updateHome(params);\r\n}\r\n\r\nexport type DismissHomeParams = {\r\n  homeId: number;\r\n};\r\n\r\nexport function dismissHome(params: DismissHomeParams): Promise<string | TuyaError> {\r\n  return tuya.dismissHome(params);\r\n}\r\n\r\nexport type SortRoomsParams = {\r\n  idList: number[];\r\n  homeId: number;\r\n};\r\n\r\nexport function sortRoom(params: SortRoomsParams): Promise<string | TuyaError> {\r\n  return tuya.sortRoom(params);\r\n}\r\n","import { TuyaError } from './generic';\r\nimport { NativeModules } from 'react-native';\r\n\r\nconst tuya = NativeModules.TuyaHomeDataManagerModule;\r\n\r\nexport type GetRoomDeviceListParams = {\r\n  homeId?: number;\r\n  roomId: number;\r\n};\r\n\r\nexport type GetRoomDeviceListResponse = {\r\n  deviceList: {}[];\r\n  groupList: {}[];\r\n};\r\n\r\nexport function getRoomDeviceList(\r\n  params: GetRoomDeviceListParams\r\n): Promise<GetRoomDeviceListResponse | TuyaError> {\r\n  return tuya.getRoomDeviceList(params);\r\n}\r\n","import { TuyaError } from './generic';\r\nimport { NativeModules, Platform } from 'react-native';\r\n\r\nconst tuya = NativeModules.TuyaHomeManagerModule;\r\n\r\nexport type CreateHomeParams = {\r\n  name: string;\r\n  geoName: string;\r\n  lon: number;\r\n  lat: number;\r\n  rooms: string[];\r\n};\r\n\r\nexport function createHome(params: CreateHomeParams): Promise<string | TuyaError> {\r\n  return tuya.createHome(params);\r\n}\r\n\r\nexport type HomeDetailsResponse = {\r\n  name: string;\r\n  admin: boolean;\r\n  background: string;\r\n  dealStatus: 1 | 2; // 1 = unaccepted 2 = accepted\r\n  displayOrder: number;\r\n  geoName: string;\r\n  gid: number;\r\n  homeId: number;\r\n  lat: number;\r\n  lon: number;\r\n};\r\n\r\nexport type QueryHomeListResponse = HomeDetailsResponse[];\r\n\r\nexport async function queryHomeList(): Promise<QueryHomeListResponse | TuyaError> {\r\n  let homes = await tuya.queryHomeList();\r\n  // Tuya's Android SDK uses different property names than the iOS SDK...\r\n  if (Platform.OS === 'android') {\r\n    homes = homes.map((m: any) => ({\r\n      ...m,\r\n      dealStatus: m.homeStatus,\r\n    }));\r\n  }\r\n  return homes;\r\n}\r\n\r\nexport type JoinFamilyParams = {\r\n  homeId: number;\r\n  action: boolean;\r\n};\r\n\r\nexport function joinFamily(params: JoinFamilyParams) {\r\n  return tuya.joinFamily(params);\r\n}\r\n","import { TuyaError } from './generic';\r\nimport { NativeModules, Platform } from 'react-native';\r\n\r\nconst tuya = NativeModules.TuyaHomeMemberModule;\r\n\r\nexport type QueryMemberListParams = { homeId: number };\r\nexport type MemberListItem = {\r\n  admin: boolean;\r\n  username: string;\r\n  id: number;\r\n  dealStatus: number;\r\n};\r\nexport type QueryMemberListResponse = MemberListItem[];\r\n\r\nexport async function queryMemberList(\r\n  params: QueryMemberListParams\r\n): Promise<QueryMemberListResponse | TuyaError> {\r\n  let members = await tuya.queryMemberList(params);\r\n  // Tuya's Android SDK uses different property names than the iOS SDK...\r\n  if (Platform.OS === 'android') {\r\n    members = members.map((m: any) => ({\r\n      admin: m.admin,\r\n      username: m.account,\r\n      id: m.memberId,\r\n      dealStatus: m.memberStatus,\r\n    }));\r\n  }\r\n  return members;\r\n}\r\n\r\nexport type AddMemberParams = {\r\n  homeId: number;\r\n  userAccount: string; // email\r\n  countryCode: string;\r\n  name: string;\r\n  admin: boolean;\r\n};\r\n\r\nexport function addMember(params: AddMemberParams): Promise<any> {\r\n  return tuya.addMember(params);\r\n}\r\n\r\nexport type RemoveMemberParams = {\r\n  memberId: number;\r\n};\r\n\r\nexport function removeMember(params: RemoveMemberParams): Promise<any> {\r\n  return tuya.removeMember(params);\r\n}\r\n","import { NativeModules } from 'react-native';\r\nimport { addEvent, bridge, HARDWAREUPGRADELISTENER } from './bridgeUtils';\r\nimport { TuyaError } from './generic';\r\n\r\nconst tuya = NativeModules.TuyaDeviceModule;\r\n\r\nexport type StartOtaParams = {\r\n  devId: string;\r\n};\r\n\r\nexport function startOta(\r\n  params: StartOtaParams,\r\n  onSuccess: (data: any) => void,\r\n  onFailure: (data: any) => void,\r\n  onProgress: (data: any) => void\r\n) {\r\n  tuya.startOta(params);\r\n  return addEvent(bridge(HARDWAREUPGRADELISTENER, params.devId), data => {\r\n    if (data.type === 'onSuccess') {\r\n      onSuccess(data);\r\n    } else if (data.type === 'onFailure') {\r\n      onFailure(data);\r\n    } else if (data.type === 'onProgress') {\r\n      onProgress(data);\r\n    }\r\n  });\r\n}\r\n\r\nexport function getOtaInfo(params: StartOtaParams): Promise<any[] | TuyaError> {\r\n  return tuya.getOtaInfo(params);\r\n}\r\n","import { NativeModules } from 'react-native';\r\nimport { DeviceDps } from './device';\r\nimport { TuyaError } from './generic';\r\n\r\nconst tuya = NativeModules.TuyaTimerModule;\r\n\r\nexport type AddTimerWithTaskDpsParams = {\r\n  devId: number;\r\n  taskName: string;\r\n  loops: string; // Number of cycles \"0000000\", each 0: off, 1: on, from left to right: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\r\n  time: string; // e.g. 14:29\r\n  dps: DeviceDps;\r\n};\r\n\r\nexport function addTimerWithTask(\r\n  params: AddTimerWithTaskDpsParams\r\n): Promise<any> {\r\n  return tuya.addTimerWithTask(params);\r\n}\r\n\r\nexport type UpdateTimerWithTaskParams = AddTimerWithTaskDpsParams & {\r\n  timerId: string;\r\n  isOpen: boolean;\r\n};\r\n\r\nexport function updateTimerWithTask(\r\n  params: UpdateTimerWithTaskParams\r\n): Promise<any> {\r\n  return tuya.updateTimerWithTask(params);\r\n}\r\n\r\nexport type GetTimerTaskStatusWithDeviceIdParams = {\r\n  devId: number;\r\n};\r\n\r\nexport function getTimerTaskStatusWithDeviceId(\r\n  params: GetTimerTaskStatusWithDeviceIdParams\r\n): Promise<any> {\r\n  return tuya.getTimerTaskStatusWithDeviceId(params);\r\n}\r\n\r\nexport type GetAllTimerWithDeviceIdParams = {\r\n  devId: number;\r\n};\r\n\r\nexport type TimerTask = {\r\n  timerList: {\r\n    timerId: string;\r\n    loops: string;\r\n    time: string;\r\n    status: number;\r\n  }[];\r\n  timerTaskStatus: { open: boolean; timerName: string };\r\n};\r\n\r\nexport type GetAllTimerWithDeviceIdResponse = TimerTask[];\r\n\r\nexport async function getAllTimerWithDeviceId(\r\n  params: GetAllTimerWithDeviceIdParams\r\n): Promise<GetAllTimerWithDeviceIdResponse | TuyaError> {\r\n  const timers = await tuya.getAllTimerWithDeviceId(params);\r\n  timers.forEach((t: any) => {\r\n    t.timerTaskStatus.open = !!t.timerTaskStatus.open;\r\n  });\r\n  return timers;\r\n}\r\n\r\nexport type RemoveTimerWithTaskParams = {\r\n  devId: number;\r\n  taskName: string;\r\n  timerId: string;\r\n};\r\n\r\nexport function removeTimerWithTask(\r\n  params: RemoveTimerWithTaskParams\r\n): Promise<any> {\r\n  return tuya.removeTimerWithTask(params);\r\n}\r\n\r\nexport type UpdateTimerStatusWithTaskParams = {\r\n  devId: number;\r\n  taskName: string;\r\n  timerId: string;\r\n  isOpen: boolean;\r\n};\r\n\r\nexport function updateTimerStatusWithTask(\r\n  params: UpdateTimerStatusWithTaskParams\r\n): Promise<any> {\r\n  return tuya.updateTimerStatusWithTask(params);\r\n}\r\n","import { TuyaError } from './generic';\r\nimport { NativeModules, Platform } from 'react-native';\r\n\r\nconst tuya = NativeModules.TuyaUserModule;\r\n\r\nexport type RegisterAccountWithEmailParams = {\r\n  countryCode: string;\r\n  email: string;\r\n  validateCode: string;\r\n  password: string;\r\n};\r\nexport function registerAccountWithEmail(\r\n  params: RegisterAccountWithEmailParams\r\n): Promise<any> {\r\n  return tuya.registerAccountWithEmail(params);\r\n}\r\n\r\nexport type GetEmailValidateCodeParams = {\r\n  countryCode: string;\r\n  email: string;\r\n};\r\nexport function getRegisterEmailValidateCode(\r\n  params: GetEmailValidateCodeParams\r\n): Promise<any> {\r\n  return tuya.getRegisterEmailValidateCode(params);\r\n}\r\n\r\n\r\nexport type LoginWithEmailParams = {\r\n  email: string;\r\n  password: string;\r\n  countryCode: string;\r\n};\r\nexport function loginWithEmail(params: LoginWithEmailParams): Promise<any> {\r\n  return tuya.loginWithEmail(params);\r\n}\r\n\r\nexport function getEmailValidateCode(\r\n  params: GetEmailValidateCodeParams\r\n): Promise<any> {\r\n  return tuya.getEmailValidateCode(params);\r\n}\r\n\r\nexport type ResetEmailPasswordParams = {\r\n  email: string;\r\n  countryCode: string;\r\n  validateCode: string;\r\n  newPassword: string;\r\n};\r\nexport function resetEmailPassword(\r\n  params: ResetEmailPasswordParams\r\n): Promise<any> {\r\n  return tuya.resetEmailPassword(params);\r\n}\r\n\r\nexport function logout(): Promise<string | TuyaError> {\r\n  return tuya.logout();\r\n}\r\n\r\nexport type User = {\r\n  email: string;\r\n  username: string;\r\n  sid: string;\r\n  timezoneId: string;\r\n  uid: string;\r\n  userType: number;\r\n  headPic: string;\r\n  mobile: string;\r\n  nickName: string;\r\n  phoneCode: string;\r\n};\r\n\r\nexport async function getCurrentUser(): Promise<User | null | TuyaError> {\r\n  const user = await tuya.getCurrentUser();\r\n  // The iOS SDK returns an empty user model but the Android one doesn't.\r\n  // Need to check for username over email, as guest accounts do not have an email.\r\n  return user && user.username ? user : null;\r\n}\r\n\r\nexport function cancelAccount(): Promise<string | TuyaError> {\r\n  return tuya.cancelAccount();\r\n}\r\n\r\nexport type GuestAccountLoginParams = {\r\n  countryCode: string;\r\n  nickname: string;\r\n};\r\n\r\nexport function loginWithGuest(params: GuestAccountLoginParams): Promise<any> {\r\n  if (Platform.OS === 'ios') {\r\n    // TODO: Implement iOS guest login code\r\n    return Promise.resolve(null);\r\n  }\r\n  return tuya.loginWithTouristUser(params);\r\n}\r\n"],"names":["ActivatorType","tuya","NativeModules","TuyaActivatorModule","tuyaBLEActivator","TuyaBLEActivatorModule","tuyaBLEScanner","TuyaBLEScannerModule","eventEmitter","NativeEventEmitter","TuyaRNEventEmitter","addEvent","eventName","callback","addListener","bridge","key","id","TuyaDeviceModule","devListenerSubs","TuyaHomeModule","TuyaHomeDataManagerModule","TuyaHomeManagerModule","TuyaHomeMemberModule","TuyaTimerModule","TuyaUserModule","params","addMember","addTimerWithTask","cancelAccount","createHome","dismissHome","getAllTimerWithDeviceId","then","timers","forEach","t","timerTaskStatus","open","e","Promise","reject","getCurrentUser","user","username","success","error","getCurrentWifi","getDataPointStat","Platform","OS","console","resolve","getDevice","getDeviceData","getEmailValidateCode","getHomeDetail","getOtaInfo","getRegisterEmailValidateCode","getRoomDeviceList","getTimerTaskStatusWithDeviceId","initActivator","initBluetoothDualModeActivator","joinFamily","loginWithEmail","loginWithTouristUser","logout","openNetworkSettings","queryHomeList","homes","map","m","_extends","dealStatus","homeStatus","queryMemberList","members","admin","account","memberId","memberStatus","queryRoomList","registerAccountWithEmail","type","registerDevListener","sub","devId","data","removeDevice","removeMember","removeTimerWithTask","renameDevice","resetEmailPassword","send","sortRoom","startBluetoothScan","onSuccess","onFailure","onProgress","startOta","stopConfig","remove","unRegisterDevListener","updateHome","updateTimerStatusWithTask","updateTimerWithTask"],"mappings":"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"}